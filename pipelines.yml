resources:   
  - name: sample_node
    type: GitRepo
    configuration:
      gitProvider: ankul_github
      path: ankul-shippable/sample_node
      branches:
        include: master
      tags:
        include: v1.0
        exclude: v1.1
      buildOn:
        commit: true
        pullRequestCreate: false
        pullRequestClose: false
        releaseCreate: false
        tagCreate: false
      shallowDepth: 10

pipelines:
  - name: ankul_pipeline
    steps:
      - name: test_step
        type: Bash
        configuration:
          nodePool: ankul_u16_nodes
          inputResources:
            - name: sample_node
        execution:
          onExecute:
            - echo "executing test bash step..."

      - name: npm_build
        type: NpmBuild
        configuration:
#           npmArgs: -g
          nodePool: ankul_u16_nodes
          repositoryName: npm-dev-virtual
          sourceLocation: .
          integrations:
            - name: ankul_artifactory
          inputResources:
            - name: sample_node
          inputSteps:
            - name: test_step
        execution:
          onSuccess:
            - echo "success!"
            - sourceLocation=$(jq -r ".step.configuration.sourceLocation" $step_json_path) 
            - add_run_variable ${step_name}_sourceLocation=$sourceLocation
           
      - name: npm_publish_bash
        type: Bash
        configuration:
          nodePool: ankuk_u16_nodes
#           repositoryName: ankul-npm-publish
          integrations:
            - name: ankul_artifactory
          inputSteps:
            - name: npm_build
        execution:
          onExecute:
            - ls $run_dir/workspace
            - |
              export artifactoryIntegrationName="ankul_artifactory"
              export inputNpmBuildStepName="npm_build"
              echo "[NpmPublish] Authenticating with integration: $artifactoryIntegrationName"
              local rtUrl=$(eval echo "$"int_"$artifactoryIntegrationName"_url)
              local rtUser=$(eval echo "$"int_"$artifactoryIntegrationName"_user)
              local rtApiKey=$(eval echo "$"int_"$artifactoryIntegrationName"_apikey)
              retry_command jfrog rt config --url $rtUrl --user $rtUser --apikey $rtApiKey --interactive=false
              
              local sourceStateName=$(eval echo "$""$inputNpmBuildStepName"_sourceStateName)

              restore_run_state $sourceStateName /tmp/jfrog/$sourceStateName
              
              sudo apt-get install tree
              tree /tmp/jfrog/$sourceStateName

              local buildNumber=$(eval echo "$""$inputNpmBuildStepName"_buildNumber)
              local buildName=$(eval echo "$""$inputNpmBuildStepName"_buildName)
              local sourceLocation=$(eval echo "$""$inputNpmBuildStepName"_sourceLocation)
              local repositoryName="ankul-npm-publish"
              
              echo -e "\n[NpmPublish] Changing directory: /tmp/jfrog/$sourceStateName/$sourceLocation"
              pushd /tmp/jfrog/$sourceStateName/$sourceLocation
                jfrog rt npm-publish $repositoryName --build-name=$buildName --build-number=$buildNumber
                echo -e "\n[NpmPublish] Adding publish information to run state"
                add_run_variable buildStepName=${step_name}
                add_run_variable ${step_name}_payloadType=npm
                add_run_variable ${step_name}_buildNumber=${buildNumber}
                add_run_variable ${step_name}_buildName=${buildName}
              popd
              jfrog rt bce $buildName $buildNumber
              echo $run_dir/workspace/$sourceStateName
              rm -rf $run_dir/workspace/$sourceStateName
              ls $run_dir/workspace
