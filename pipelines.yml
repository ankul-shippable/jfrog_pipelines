resources:   
  - name: sample_node
    type: GitRepo
    configuration:
      gitProvider: ankul_github
      path: ankul-shippable/sample_node
      branches:
        include: master
      tags:
        include: v1.0
        exclude: v1.1
      buildOn:
        commit: true
        pullRequestCreate: false
        pullRequestClose: false
        releaseCreate: false
        tagCreate: false
      shallowDepth: 10

pipelines:
  - name: ankul_pipeline
    steps:
      - name: test_step
        type: Bash
        configuration:
          nodePool: ankul_u16_nodes
          inputResources:
            - name: sample_node
        execution:
          onExecute:
            - echo "executing test bash step..."

      - name: npm_build
        type: NpmBuild
        configuration:
#           npmArgs: -g
          repositoryName: npm-dev-virtual
          sourceLocation: .
          integrations:
            - name: ankul_artifactory
          inputResources:
            - name: sample_node
          inputSteps:
            - name: test_step
        execution:
          onSuccess:
            - |
              echo "[NpmBuild] Authenticating with integration: $artifactoryIntegrationName"
              local rtUrl=$(eval echo "$"int_"$artifactoryIntegrationName"_url)
              local rtUser=$(eval echo "$"int_"$artifactoryIntegrationName"_user)
              local rtApiKey=$(eval echo "$"int_"$artifactoryIntegrationName"_apikey)
              retry_command jfrog rt config --url $rtUrl --user $rtUser --apikey $rtApiKey --interactive=false
              buildName=$pipeline_name
              buildNumber=$run_number
              sourceLocation=$(jq -r ".step.configuration.sourceLocation" $step_json_path)
              repositoryName=$(jq -r ".step.configuration.repositoryName" $step_json_path)
              inputGitRepoResourcePath=$(eval echo "$"res_"$inputGitRepoResourceName"_resourcePath)
              npmArgs=$(jq -r ".step.configuration.npmArgs" $step_json_path)
              if [ -z "$npmArgs" ] || [ "$npmArgs" == "null" ]; then
                npmArgs=""
              fi
              echo "npmArgs: $npmArgs"
              echo "[NpmBuild] Changing directory: $inputGitRepoResourcePath/$sourceLocation"
              pushd $inputGitRepoResourcePath/$sourceLocation
                echo "[NpmBuild] Installing npm packages"
                echo jfrog rt npm-install $repositoryName --build-name=$buildName --build-number=$buildNumber --npm-args="$npmArgs"           
                jfrog rt npm-install $repositoryName --build-name=$buildName --build-number=$buildNumber
                echo "[NpmBuild] Adding build information to run state"
                add_run_variable buildStepName=${step_name}
                add_run_variable ${step_name}_payloadType=npm
                add_run_variable ${step_name}_buildNumber=${buildNumber}
                add_run_variable ${step_name}_buildName=${buildName}
                add_run_variable ${step_name}_isPromoted=false
              popd
              jfrog rt bce $buildName $buildNumber
              save_run_state $inputGitRepoResourcePath/$sourceLocation/. npmBuildGitRepo
